%% Gait Analysis (w/ accelerometer)
clear all; clc; close all

%% -- About
% Date: 3Aug2017
% Subject: EGS
% KISTLER Sensor: - 2150551 (Acc1) - Shank L
%                 - 2148496 (Acc2) - Shank R
% DELSYS Sensor:  - Sensor 1  -  Shank L
%                 - Sensor 2  -  Shank R
% --- First support on FP : always with the RIGHT foot

%% -- About the files

Path = 'C:\Users\BMClab\Downloads\Desiree\Acelerometro\Acelerometro-GitHub\Coletas\';

% -- Settings

% Name = 'Acc_170803_EGS_';
% csv = '-Delsys 1.csv';
% Trial = {'1' '2' '3' '4' '5'};
% ShankL = 2;ShankR = 3;

Name = 'Acc_170731_RNW_';
csv = '-Delsys 1.csv';
Trial = {'1' '2' '4' '5'};
ShankL = 5;ShankR = 4;

% Name = 'Acc_170731_DCM_';
% csv = '-Delsys 1.csv';
% Trial = {'1' '2' '3' '4' };
% ShankL = 5;ShankR = 4;

%% -- Initializing some variables

% -- Sample Frequencies
Fs = 148.39; % Delsys sensor
FsFP = 300;  % force plates

% --
ChannelType = 'AUX';
Signal = {'IM ACC Pitch', 'IM ACC Roll', 'IM ACC Yaw',...
    'IM GYR Pitch', 'IM GYR Roll', 'IM GYR Yaw'};

Var = {'ACCF','ACCPitchF','ACCRollF','ACCYawF',...
    'GYR','GYRPitchF','GYRRollF','GYRYawF'};%,'AccF.^2'}; %Used in linear combination

Sensors = {'ShankR','ShankL'};

% -- Filter
[n,Wn] = buttord(10/(Fs/2),20/(Fs/2),1,60);
[b,a] = butter(n, Wn);

% -- Standard deviation to be used in Linear Combination
sd = 50e-3;

% -- To plot results
% figure(1); figure(2)

%% Load Data

for k = 3: length(Var)
    % -- Combinatorial analysis to find the best set of variables
    % to be used in linear combination
    Combinatorics = nchoosek(Var,k);
    
    for kk = 1 : size (Combinatorics,1)
        
        Features = Combinatorics(kk,:);
        
        % -- Initializing variables for linear combination
        p = [];%zeros(ceil(Fs),length(Features),length(Sensors)*length(Trial));
        y = [];%zeros(ceil(Fs),2*length(Trial));
        
        for j = 1: length(Trial)
            
            File = [Name,Trial{j}];
            FilePath = [Path,File];
            
            for i = 1:length(Signal)
                VarName = strrep(strrep(Signal{i},'IM ',''),' ','');
                eval([VarName '= ReadDelsys([FilePath,csv], ChannelType, Signal(i));']);
                temp = eval(VarName);
                %Filtering
                eval([VarName 'F' ' = [temp(:,1),filtfilt(b,a,temp(:,2:end))];']);
            end
            
            EMG = ReadDelsys([FilePath,csv], 'IMEMG', 'EMG');
            
            Cte = ones(size(eval(VarName),1),size(eval(VarName),2));
            
            % Cortex data
            Forces = importdata([FilePath,'.forces']);
            Fy = (Forces.data(:,1) -1)/FsFP;
            for i =1 : length(Forces.colheaders)
                if strcmp(Forces.colheaders{i}(1:2), 'FY')
                    Fy = [Fy, Forces.data(:,i)];
                end
            end
            
            Fy(:,6:8) = Fy(:,6:8)/10;

           
            %% -- Resultants
            
            % Delsys
            ACC = [ACCPitch(:,1), sqrt(ACCPitch(:,2:end).^2 + ACCRoll(:,2:end).^2 + ACCYaw(:,2:end).^2)];
            ACCF = [ACCPitch(:,1), sqrt(ACCPitchF(:,2:end).^2 + ACCRollF(:,2:end).^2 + ACCYawF(:,2:end).^2)];
            
            GYR = [GYRPitch(:,1), sqrt(GYRPitch(:,2:end).^2 + GYRRoll(:,2:end).^2 + GYRYaw(:,2:end).^2)];
            GYRF = [GYRPitch(:,1), sqrt(GYRPitchF(:,2:end).^2 + GYRRollF(:,2:end).^2 + GYRYawF(:,2:end).^2)];
            
            %% Linear combination of different variables apllied in one gait cycle
            %  
            instant = importdata('Instantes_gait.txt',',');
            [HeelContact, ToeOff] = Instants(instant,File);
            HeelContactInd = floor(HeelContact*Fs);
            
            % --- Building inputs for Orthogonal Least Squares Algorithm
            % --- (ols.m) implemented by Renato Naville Watanabe
            for i = 1 : length(Sensors)
                first(i) = HeelContactInd(i,1);
                % last(i) =  HeelContactInd(i,2);
                last(i) =  HeelContactInd(i,1)+floor(Fs);
                               
                for jj = 1 : length (Features)
                    p(:,jj,j+(i-1)*length(Trial)) = eval([Features{jj},'(first(i):last(i),eval(Sensors{i}))']);
                    
                    stimulWin = exp(-0.5*((ACC(:,1)-(ToeOff(1,1)- sd))/(sd/3)).^2);
                    
                    y(:,j+(i-1)*length(Trial)) = stimulWin(first:last);
                    
                end
            end
            
            % Plot Fy
            HeelContactInd = ceil(HeelContact*FsFP);
            for i = 1: length(Sensors)
                first1(i) = HeelContactInd(i,1);
                % last1(i) =  HeelContactInd(i,2);
                last1(i) =  HeelContactInd(i,1)+ceil(FsFP);
            end
            for i = 1 : length(Sensors)
                cycle1 = ((first1(i):1:last1(i))-first1(i))/(last1(i)-first1(i));
                figure(i);
                subplot(length(Trial)+1,1,j); plot(cycle1, Fy(first1(i):last1(i),2:end));
            end
        end
        beta = ols(p,y); % Coefs for linear combination
        betaM = mean(beta,2);
        
        % --- Applying Linear Combination
        LinearCombination = zeros(ceil(Fs),1);
        for i = 1:length(Features)
            for j = 1 : length(Sensors)*length(Trial)
                LinearCombination = LinearCombination + beta(i,j)*p(:,i,j);
                % LinearCombination = LinearCombination + betaM(i)*p(:,i,j);
            end
        end
        
        for i = 1 : length(Sensors)
            cycle = ((first(i):1:last(i))-first(i))/(last(i)-first(i));
            
            ToeOffInd = (floor(ToeOff*Fs)-first(i))/(last(i)-first(i));
            
            figure(i)
            subplot(length(Trial)+1,1,length(Trial)+1); 
            plot(cycle,LinearCombination);
            ylim([-0.5 1.2]);
        end
        
        

        %% CONTINUAR DAQUI
        % --- Checking the combination's quality
        
        threshold = (max(LinearCombination))*0.75;
        % threshold = (max(LinearCombination)-min(LinearCombination))*0.75;
        [pks,locs] = findpeaks(LinearCombination,Fs,'MinPeakHeight',threshold);
        
        Line = line([locs locs], [-1 100],'Linewidth',1,'Linestyle','--','Color',[0 0 0]);
        set(Line,'Clipping','off')

        
        keyboard %breakpoint
    end
end

%% -- Plots
% % 
% % figure;
% % subplot(3,1,1); plot(Fy(:,1), Fy(:,2:end));
% % legend({'1','2','3','4','5','6','7'})
% %
% % %Delsys
% % subplot(3,1,2); plot(Acc(:,1), Acc(:,ShankL),AccF(:,1), AccF(:,ShankL)); ylabel('Shank L')
% % title('Resultant'); legend('Raw','Filtered')
% % subplot(3,1,3); plot(Acc(:,1), Acc(:,ShankR),AccF(:,1), AccF(:,ShankR)); ylabel('Shank R')
% % % Kistler
% % %subplot(3,1,2); plot(Acc1(:,1),Acc1(:,ShankL)); ylabel('Shank L')
% % %title('Resultant')
% % %subplot(3,1,3); plot(Acc2(:,1),Acc2(:,ShankL)); ylabel('Shank R')
% % ylim([-2 2]);
% % PlotInstants( instant, File )
% %
% % %--
% % figure;
% % subplot(3,1,1)
% % plot(Fy(:,1), Fy(:,2:end)); legend({'1','2','3','4','5','6','7'})
% %
% % subplot(3,1,2); plot(Acc(:,1), Pitch(:,ShankL),Acc(:,1), PitchF(:,ShankL)); ylabel('Shank L')
% % title('Pitch'); legend('Raw','Filtered')
% % subplot(3,1,3); plot(Acc(:,1), Pitch(:,ShankR),AccF(:,1), PitchF(:,ShankR)); ylabel('Shank R')
% % ylim([-2 2]);
% % PlotInstants( instant, File )
% % %--
% % figure;
% % subplot(3,1,1)
% % plot(Fy(:,1), Fy(:,2:end)); legend({'1','2','3','4','5','6','7'})
% % subplot(3,1,2); plot(Acc(:,1), Roll(:,ShankL), Acc(:,1), RollF(:,ShankL));  ylabel('Shank L')
% % title('Roll'); legend('Raw','Filtered')
% % subplot(3,1,3); plot(Acc(:,1), Roll(:,ShankR), AccF(:,1), RollF(:,ShankR)); ylabel('Shank R')
% % ylim([-2 2]);
% % PlotInstants( instant, File )
% % %--
% % figure;
% % subplot(3,1,1)
% % plot(Fy(:,1), Fy(:,2:end)); legend({'1','2','3','4','5','6','7'})
% % subplot(3,1,2); plot(Acc(:,1), Yaw(:,ShankL), Acc(:,1), YawF(:,ShankL));
% % ylabel('Shank L'); ylim([-2 2]);
% % title('Yaw'); legend('Raw','Filtered')
% % subplot(3,1,3); plot(Acc(:,1), Yaw(:,ShankR), AccF(:,1), YawF(:,ShankR));
% % ylabel('Shank R');ylim([-2 2]);
% % PlotInstants( instant, File )
% %
% % %--
% % X = Acc; XF = AccF;
% % X(:,2:end) = Acc(:,2:end).^2 - Acc(:,2:end);
% % XF(:,2:end) = AccF(:,2:end).^2 - AccF(:,2:end);
% %
% % figure;
% % subplot(3,1,1)
% % plot(Fy(:,1), Fy(:,2:end)); legend({'1','2','3','4','5','6','7'})
% % subplot(3,1,2); plot(Acc(:,1), X(:,ShankL), Acc(:,1), XF(:,ShankL));
% % ylabel('Shank L');
% % title('Yaw'); legend('Raw','Filtered')
% % subplot(3,1,3); plot(Acc(:,1), X(:,ShankR), Acc(:,1), XF(:,ShankR));
% % ylabel('Shank R');ylim([-1 10]);
% % PlotInstants( instant, File )